from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, \
    InputMediaPhoto, LabeledPrice, Message, CallbackQuery, Update
import datetime
import db
from db import *
from telethon import TelegramClient
import requests
import asyncio



loop = asyncio.get_event_loop()
bot = TeleBot(env["BOT"], parse_mode="html")
api_id = env["API"]
api_hash = env["API_H"]
client = TelegramClient('anon', api_id, api_hash)
provider_token = env["provider"]


def send_date_choice(call, vehicle, vehicle_call, type):
    keyboard = [[InlineKeyboardButton('–°–µ–≥–æ–¥–Ω—è', callback_data=f'{vehicle_call}_price_day_today'),
                 InlineKeyboardButton('–ó–∞–≤—Ç—Ä–∞', callback_data=f"{vehicle_call}_price_day_tomorrow")],
                [InlineKeyboardButton('–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é', callback_data=f'{vehicle_call}_price_day_week'),
                 InlineKeyboardButton('–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü', callback_data=f"{vehicle_call}_price_day_mouth")],
                [InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data=f'{vehicle_call}')]
                ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    who = "–∞–≤—Ç–æ–º–æ–±–∏–ª—è" if type == "auto" else "–±–∞–π–∫–∞"
    text = f"üõé <b>–ê—Ä–µ–Ω–¥–∞ {who} {vehicle}</b>\n\n" \
           "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–∞ –º–∞—à–∏–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫." if type == "auto" else f"üõé <b>–ê—Ä–µ–Ω–¥–∞ {who} {vehicle}</b>\n\n" \
                                                                                       "–í—ã–±–µ—Ä–∏, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–µ–Ω –±–∞–π–∫,"\
                                                                                       " —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫."
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.id, text=text,
                          parse_mode="HTML", reply_markup=reply_markup)


def send_rental_choice(call, vehicle, vehicle_call, period, type):
    time = datetime.datetime.now()
    tomorrow = time + datetime.timedelta(1)
    week = time + datetime.timedelta(7)
    mouth = time + datetime.timedelta(30)
    match period:
        case "today":
            time = str(time.date()).split("-")
        case "tomorrow":
            time = str(tomorrow.date()).split("-")
        case "week":
            time = str(week.date()).split("-")
        case "mouth":
            time = str(mouth.date()).split("-")
    time = f"{time[2]}.{time[1]}.{time[0]}"
    print(time)
    cars = session.query(Cars).filter_by(name=vehicle_call).first()
    keyboard = [[InlineKeyboardButton('1-3 –¥–Ω—è', callback_data=f'{vehicle_call}_price_day_3 –¥–Ω—è_'
                                                               f'{cars.three_days * 3}_{cars.three_days}_{time}')] if type in ["auto", "mydak"] else'' ,
                [InlineKeyboardButton('4-7 –¥–Ω–µ–π', callback_data=f"{vehicle_call}_price_day_7 –¥–Ω–µ–π_"
                                                                f"{cars.weeks * 7}_{cars.weeks}_{time}"),
                 InlineKeyboardButton('8-14 –¥–Ω–µ–π', callback_data=f"{vehicle_call}_price_day_14 –¥–Ω–µ–π_"
                                                                 f"{cars.two_weeks * 14}_{cars.two_weeks}_{time}")],
                [InlineKeyboardButton('15-21 –¥–Ω–µ–π', callback_data=f"{vehicle_call}_price_day_21 –¥–µ–Ω—å_"
                                                                  f"{cars.three_weeks * 21}_{cars.three_weeks}_{time}"),
                 InlineKeyboardButton('22-30 –¥–Ω–µ–π', callback_data=f'{vehicle_call}_price_day_30 –¥–Ω–µ–π_'
                                                                  f'{cars.month * 30}_{cars.month}_{time}')],
                [InlineKeyboardButton('–ú–µ—Å—è—Ü –∏ –±–æ–ª—å—à–µ',
                                      callback_data=f"{vehicle_call}_price_day_long_{cars.long}_{cars.long_per_day}_{time}")],
                [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f"{vehicle_call}")]
                ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    who = "–∞–≤—Ç–æ–º–æ–±–∏–ª—è" if type == "auto" else "–±–∞–π–∫–∞"
    text = f"üõé <b>–ê—Ä–µ–Ω–¥–∞ {who} {vehicle} —Å {time}</b>\n\n" \
           f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤–∞–º –Ω—É–∂–Ω–∞ –º–∞—à–∏–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫."
    if type == "bike":
        text = f"üõé <b>–ê—Ä–µ–Ω–¥–∞ {who} {vehicle} —Å {time}</b>\n\n" \
               f"–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤–∞–º –Ω—É–∂–Ω–µ–Ω –±–∞–π–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫."
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.id, text=text,
                          parse_mode="HTML", reply_markup=reply_markup)


def send_price(call, vehicle, vehicle_call, date, price, per_day, start_date, type):
    who = "–∞–≤—Ç–æ–º–æ–±–∏–ª—è" if type == "auto" else "–±–∞–π–∫–∞"
    keyboard = [[InlineKeyboardButton('üëå –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f'design_{vehicle}_{price}')],
                [InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data=f'{vehicle_call}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    date = "–¥–æ–ª–≥–∏–π —Å—Ä–æ–∫" if date == "long" else date
    text = f'üõé <b>–ê—Ä–µ–Ω–¥–∞ {who} {vehicle} –Ω–∞ {date} —Å {start_date}</b>\n\n' \
           f'üí∏ <b>C—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã - {price}‡∏ø</b> (–±–µ–∑ —É—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—á–∏)\n\n' \
           f'‚ÑπÔ∏è –ü—Ä–∏ –∞—Ä–µ–Ω–¥–µ {who} –Ω–∞ {date}, —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∞—Ä–µ–Ω–¥—ã {per_day}‡∏ø\n\n' \
           '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üëå –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –∏' \
           ' –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏\n' \
           ' –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'if date != "–¥–æ–ª–≥–∏–π —Å—Ä–æ–∫" else \
           f'üõé <b>–ê—Ä–µ–Ω–¥–∞ {who} {vehicle} –Ω–∞ {date} —Å {start_date}</b>\n\n' \
           f'‚ÑπÔ∏è –ü—Ä–∏ –∞—Ä–µ–Ω–¥–µ {who} –Ω–∞ {date}, —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∞—Ä–µ–Ω–¥—ã {per_day}‡∏ø\n\n' \
           '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üëå –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –∏' \
           ' –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏\n' \
           ' –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.id, text=text,
                          parse_mode="HTML", reply_markup=reply_markup)


def send_cars_info(call, vehicle_call, type):
    keyboard = [[InlineKeyboardButton('üî¢ –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data=f'{vehicle_call}_price')],
                [InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data="auto-choice"if type == "auto" else "bike-choice")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    cars = session.query(Cars).filter_by(name=vehicle_call).first()
    text = cars.text
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.id, text=text,
                          parse_mode="HTML", reply_markup=reply_markup)


def run_cars_choice(result, call, name, type):
    if len(result) >= 2 and result[1] == "price":
        if len(result) >= 3 and result[2] == "day":
            if len(result) > 4:
                send_price(call, name, result[0], result[3], result[4], result[5],
                           result[6], type)
            else:
                send_rental_choice(call, name, result[0], result[3], type)
        else:
            send_date_choice(call, name, result[0], type)

    else:
        send_cars_info(call, result[0], type)


async def get_message_from_channel(*args):
    try:
        await client.connect()
        if len(args) == 2:
            request = await client.get_messages(args[0], search=f"{args[1]}")
            return request[0]
        request = await client.get_messages(args[0], limit=1)
        request.reverse()
        last_rec_db = session.query(Info.message_id).order_by(Info.id.desc()).first()
        if last_rec_db is None:
            last_rec_db = 0
        if request[0].id != last_rec_db[0]:
            request = await client.get_messages(args[0], limit=None, add_offset=last_rec_db[0])
            await client.disconnect()
            for i in request:
                if i.id <= last_rec_db:
                    continue
                text = i.message
                if str(text).find("‚ùì") == 0:
                    info = Info(f"<a href='https://t.me/phuketfaq/{i.id}'>" + i.message.split("\n")[0].replace("‚ùì", "üí¨")\
                                 + "</a>" + "\n", i.id)
                    session.add(info)
                elif str(text).find("‚Ñπ") == 0:
                    info = Info(f"<a href='https://t.me/phuketfaq/{i.id}'>" + i.message.split("\n")[0].replace("‚Ñπ", "üì∑")\
                                 + "</a>" + "\n", i.id)
                    session.add(info)
            db.session.commit()
        return
    except Exception as error:
        print(error)
        print("get_message_from_channel")


def request_search(text):
    try:
        headers = {
            'cache-control': "no-cache",
            "X-Requested-With": "XMLHttpRequest"
        }
        link = "https://phoogle.ru/points/?search=)"
        data = {"string": f"{text}"}
        return requests.post(link, data=data, headers=headers).json()
    except Exception as error:
        print(error)


def send_point_info(points, message):
    try:
        for i in points:
            text = f"üìç<b>{points[i]['title']}</b>\n" \
                   f"{points[i]['description']}"
            bot.reply_to(message, text=text + f"\n–¢–æ—á–∫–∞ –≤ üìí<a href='https://t.me/phuketmap/"
                                         f"{loop.run_until_complete(get_message_from_channel('phuketmap', points[i]['title'])).id}'> —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ</a>",
                             parse_mode="HTML", disable_web_page_preview=True)
            keyboard = [[InlineKeyboardButton('üìç –¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ', url=f"https://phoogle.ru/points/{points[i]['pid']}")],
                        [InlineKeyboardButton('üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ',url=f"https://www.google.com/maps?saddr="
                                                                       f"My+Location&daddr={points[i]['lat']},{points[i]['lng']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_location(message.chat.id, points[i]["lat"], points[i]["lng"], reply_markup=reply_markup)
    except Exception as error:
        print(error)
        print("send point")


def send_several_point(points, message):
    try:
        count = len(points)
        end = "–∫–∏"
        if count > 4:
            end = "–µ–∫"
        text =f"–Ø –Ω–∞—à—ë–ª {count} —Ç–æ—á{end} –Ω–∞ <a href='https://phoogle.ru/?utm_source=ThaiBot&utm_medium=searchHeadLink'>" \
              f"–∫–∞—Ä—Ç–µ</a>:\n\n"
        point = []
        for i in points:
            point.append("üìç<code>" + points[i]["title"] + "</code>" + "\n"+points[i]["description"] + "\n\n")
        bot.send_message(message.chat.id, text + "".join(point) + "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ —è –ø—Ä–∏—à–ª—é —Ç–æ—á–∫—É."
                                                                  " –ù–∞–∂–º–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.",
                         disable_web_page_preview=True)
    except Exception as error:
        print(error)
        print("send several")

def send_many_points(points, message):
    try:
        text = f"–Ø –Ω–∞—à–µ–ª {next(reversed(points))} —Ç–æ—á–µ–∫ –Ω–∞ <a href='https:" \
               f"//phoogle.ru/?utm_source=ThaiBot&utm_medium=searchHeadLink'>–∫–∞—Ä—Ç–µ</a>:\n\n"
        point_list = []
        for i in points:
            point_list.append(f"üìç <code>{points[i]['title']}</code>, ")
        point_list[-1] = point_list[-1].replace(",", ".")
        bot.send_message(message.chat.id, text + "".join(point_list) + "\n\n–£—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∏–ª–∏ –ø—Ä–∏—à–ª–∏\n"\
                                                                       " –º–Ω–µ üìç –ª–æ–∫–∞—Ü–∏—é - —è –ø–æ–∏—â—É —Ä—è–¥–æ–º —Å –Ω–µ–π, –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ üìí\n"\
                                                                       "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–µ—Å—Ç –ü—Ö—É–∫–µ—Ç–∞, —Ç–∞–º –≤–æ–æ–±—â–µ –≤—Å–µ —Ç–æ—á–∫–∏ –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑\n"\
                                                                       " —Ç–µ–ª–µ–≥—Ä–∞–º–∞ —Å —Ç—ç–≥–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º.\n",
                                                                       disable_web_page_preview=True)
    except Exception as error:
        print(error)

def send_no_points(message):
    bot.reply_to(message, "ü§î –•–º–º, –ø–æ—Ö–æ–∂–µ —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É,\n"
                          "–ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π.")


def send_info(message):
    keyboard = [[InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–µ 15 ‚û°', callback_data="{\"method\":\"pagination\",\"page\": 2}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    loop.run_until_complete(get_message_from_channel('phuketfaq'))
    questions = session.query(Info.text).limit(15).offset(0).all()
    list_questions = []
    for i in questions:
        list_questions.append(i[0])
    bot.send_message(message.chat.id, f"‚ÑπÔ∏è –í –º–æ–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑–µ {session.query(Info.id).order_by(Info.id.desc()).first()[0]} –∑–∞–º–µ—Ç–æ–∫.\n\n"
                                      "<b>–í–æ—Ç –∏—Ö –ø–µ—Ä–≤—ã–µ 15 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:</b>\n" + "".join(list_questions),
                     reply_markup=reply_markup)

def send_pagination(message, reply_markup, page, count):
    loop.run_until_complete(get_message_from_channel('phuketfaq'))
    questions = session.query(Info.text).limit(15).offset((page * 15) - 15).all()
    list_questions = []
    for i in questions:
        list_questions.append(i[0])
    difference = len(list_questions)
    bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message.id, text=f"‚ÑπÔ∏è –í –º–æ–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑–µ "
                                        f"{count} –∑–∞–º–µ—Ç–æ–∫.\n\n"
                                      f"<b>–í–æ—Ç –∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∏: —Å {(page*15) - 14} –ø–æ {(page * 15) + (difference - 15)}</b>\n" + "".join(list_questions),
                          parse_mode="HTML", reply_markup=reply_markup)

def send_info_disc(message):
    try:
        request = loop.run_until_complete(get_message_from_channel('phuketfaq', message.text))
        print(request)
        if request is None:
            return False
        text = request.message.split("\n")
        title = text[0]
        bot.reply_to(message, text=f"<b>{title.replace('‚ùì', '‚Ñπ')}</b>" + request.message.replace(title, ""),
                     parse_mode="HTML", disable_web_page_preview=True)
    except Exception as error:
        print(error)
        print("send info")


def design_car(message, car, price):
    prices = [LabeledPrice(label=f'{car}', amount=int(price) * 100), LabeledPrice('–ú–Ω–µ –Ω–∞ –ø–∏—Ü—Ü—É', 500)]
    bot.send_invoice(
                     message.from_user.id,
                     f'–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É',
                     f'–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å {car}?\n –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –º—ã —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏–º–µ–º –µ–µ –≤ —Ä–∞–±–æ—Ç—É!', #description
                     f'{car}',
                     provider_token,
                     'Rub', #currency
                     prices, #prices
                     photo_url='http://erkelzaar.tsudao.com/models/perrotta/TIME_MACHINE.jpg',
                     photo_height=512,
                     photo_width=512,
                     photo_size=512,
                     is_flexible=False,
                     start_parameter='time-machine-example')


def send_success_paid(message):
    bot.send_message(message.from_user.id,
                     f"–ó–∞—è–≤–∫–∞ –Ω–∞ {message.successful_payment.invoice_payload} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n –í —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—å—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä")